DEFINE_PATCH_FUNCTION ~UPDATE_SPELL_SAVES~
	INT_VAR
		original_save=0b00001
	    target_save=0b00001
		match_opcode=~-1~
	BEGIN

		READ_LONG 0x64 header_block_offset //beginning of extended_headers table
		READ_LONG 0x6a effects_block_offset //beginning of effects table
		READ_SHORT 0x68 n_headers //number of extended_headers

		
		SET effect_size=0x30 //size of effect block
		
		PATCH_IF (~%SOURCE_EXT%~ STRING_EQUAL ~SPL~) BEGIN
			SET header_size=0x28 //size of header block
		END
		ELSE BEGIN
			SET header_size=0x38 //size of header block for items
		END
		
		
		SET relative_effects_offset=0x0020
		SET relative_n_effects_offset=0x001e
		SET relative_saves_offset=0x0024
		
		FOR (i=0;i<n_headers;i=i+1) BEGIN
			SET current_header_offset = header_block_offset+i*header_size
			
			READ_SHORT current_header_offset+relative_n_effects_offset   n_effects //number of effects in the header
			READ_SHORT current_header_offset+relative_effects_offset     current_effects_offset //offset to effects of the header
			
			SET current_effects_offset=effects_block_offset + current_effects_offset*effect_size

			FOR (j=0;j<n_effects;j=j+1) BEGIN
				READ_SHORT current_effects_offset + j*effect_size  opcode
				
				PATCH_IF (match_opcode<0 OR match_opcode=opcode) BEGIN
					SET current_effect_offset=current_effects_offset + j*effect_size
					SET saves_offset = current_effect_offset + relative_saves_offset //offset to saves of the current effect
				
					READ_BYTE saves_offset saves		//first byte of saves (actually only first 5 bits containing saves data)
				
					PATCH_IF ((saves BAND original_save) OR (saves == original_save)) BEGIN					
						WRITE_BYTE saves_offset target_save												
					END
					
				END
				
			END		
			
		END
		
    END		
	

